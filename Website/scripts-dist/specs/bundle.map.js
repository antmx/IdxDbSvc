{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "scripts-dist/CreateDbIndexArgs.js",
    "scripts-dist/DbTableDef.js",
    "scripts-dist/IdxDbSvc.js",
    "scripts-dist/specs/IdxDbSvc_spec.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Represents the arguments required for creating an index on a database table/store.\r\n */\r\nvar CreateDbIndexArgs = /** @class */ (function () {\r\n    /**\r\n     * Constructor.\r\n     * @param indexName Name of the index.\r\n     * @param keyPath Single field name or array of field names the index applies to.\r\n     * @param optionalParameters Optional parameters for the index.\r\n     */\r\n    function CreateDbIndexArgs(indexName, keyPath, optionalParameters) {\r\n        this.IndexName = indexName;\r\n        this.KeyPath = keyPath;\r\n        this.OptionalParameters = optionalParameters;\r\n    }\r\n    return CreateDbIndexArgs;\r\n}());\r\nexports.CreateDbIndexArgs = CreateDbIndexArgs;\r\n//# sourceMappingURL=CreateDbIndexArgs.js.map",
    "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Represents setting for defining a database table.\r\n */\r\nvar DbTableDef = /** @class */ (function () {\r\n    function DbTableDef(tableName, colNames, pkColName, addIsModifiedCol) {\r\n        if (addIsModifiedCol === void 0) { addIsModifiedCol = false; }\r\n        this.TableName = tableName;\r\n        this.ColNames = colNames;\r\n        this.PkColName = pkColName;\r\n        this.AddIsModifiedCol = addIsModifiedCol;\r\n    }\r\n    return DbTableDef;\r\n}());\r\nexports.DbTableDef = DbTableDef;\r\n//# sourceMappingURL=DbTableDef.js.map",
    "\"use strict\";\r\n/// <reference path=\"dbtabledef.ts\" />\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar CreateDbIndexArgs_1 = require(\"./CreateDbIndexArgs\");\r\nvar IdxDbSvc = /** @class */ (function () {\r\n    function IdxDbSvc(idxDbEnv) {\r\n        this.AddIsModifiedColumn = function (indexArray) {\r\n            indexArray.push(new CreateDbIndexArgs_1.CreateDbIndexArgs(\"IsModified\", \"IsModified\", { unique: false, multiEntry: false }));\r\n        };\r\n        this.IdxDbEnv = idxDbEnv;\r\n    }\r\n    IdxDbSvc.prototype.CreateDb = function (dbName, dbVersion, tableDefs) {\r\n        var self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var dbOpenRequest = self.IdxDbEnv.open(dbName, dbVersion);\r\n            dbOpenRequest.onupgradeneeded = function (event) {\r\n                console.log(\"onupgradeneeded\");\r\n                self.OpenDbRequestStatus = \"upgrading\";\r\n                //deferred.notify(\"onupgradeneeded started\");\r\n                var db = dbOpenRequest.result;\r\n                db.onerror = function (event) {\r\n                    reject(Error(\"Error opening database \"));\r\n                };\r\n                db.onabort = function (event) {\r\n                    reject(\"Database opening aborted\");\r\n                };\r\n                // Create a store (table) for each table definition provided\r\n                tableDefs.forEach(function (tblDef) {\r\n                    //deferred.notify(\"Creating store \" + tblDef.TableName);\r\n                    self.BuildStore(db, tblDef.TableName, tblDef.ColNames, tblDef.PkColName, tblDef.AddIsModifiedCol);\r\n                    //deferred.notify(\"Created store \" + tblDef.TableName);\r\n                });\r\n                self.OpenDbRequestStatus = \"ok\";\r\n                //deferred.notify(\"dbOpenRequest.onupgradeneeded completed\");\r\n                dbOpenRequest.result.close();\r\n                //resolve(true);\r\n            };\r\n            dbOpenRequest.onsuccess = function (event) {\r\n                if (self.OpenDbRequestStatus == \"ok\") {\r\n                    //deferred.notify(\"dbOpenRequest.onsuccess - ok\");\r\n                    dbOpenRequest.result.close();\r\n                    resolve(true);\r\n                }\r\n                else {\r\n                    //deferred.notify(\"dbOpenRequest.onsuccess - upgrading\");\r\n                }\r\n            };\r\n            dbOpenRequest.onerror = function (event) {\r\n                reject(\"dbOpenRequest.onerror \" + event);\r\n            };\r\n            dbOpenRequest.onblocked = function (event) {\r\n                reject(\"dbOpenRequest.onblocked \" + event);\r\n            };\r\n        });\r\n    };\r\n    IdxDbSvc.prototype.BuildStore = function (db, tblName, colNames, pkColName, addIsModifiedCol) {\r\n        if (!colNames || !colNames.length || colNames[0] == null) {\r\n            alert(\"No column data found for table \" + tblName);\r\n            //deferred.notify(\"No column data found for table \" + tblName);\r\n            return;\r\n        }\r\n        var self = this;\r\n        var indexesToCreate = [];\r\n        var isPkCol = false;\r\n        var createStoreOptions = {\r\n            keyPath: \"\",\r\n            autoIncrement: false\r\n        };\r\n        colNames.forEach(function (colName) {\r\n            if (colName === pkColName) {\r\n                isPkCol = true;\r\n            }\r\n            else {\r\n                isPkCol = false;\r\n            }\r\n            if (isPkCol) {\r\n                // Only create indexes for PK columns\r\n                indexesToCreate.push(new CreateDbIndexArgs_1.CreateDbIndexArgs(colName, colName, { unique: isPkCol, multiEntry: false }));\r\n            }\r\n            if (colName === pkColName) {\r\n                createStoreOptions.keyPath = colName;\r\n            }\r\n            createStoreOptions.autoIncrement = false;\r\n        });\r\n        if (addIsModifiedCol) {\r\n            self.AddIsModifiedColumn(indexesToCreate);\r\n        }\r\n        var store = db.createObjectStore(tblName, createStoreOptions);\r\n        indexesToCreate.forEach(function (dbIdxArgs) {\r\n            store.createIndex(dbIdxArgs.IndexName, dbIdxArgs.KeyPath, dbIdxArgs.OptionalParameters);\r\n        });\r\n    };\r\n    IdxDbSvc.prototype.GetStoreNames = function (dbName, dbVersion) {\r\n        var self = this;\r\n        var dbOpenRequest = self.IdxDbEnv.open(dbName, dbVersion);\r\n        return new Promise(function (resolve, reject) {\r\n            dbOpenRequest.onsuccess = function (ev /*Event*/) {\r\n                var db = ev.target.result;\r\n                resolve(db.objectStoreNames);\r\n                dbOpenRequest.result.close();\r\n            };\r\n            dbOpenRequest.onerror = function (event) {\r\n                reject(Error(\"Error opening database\"));\r\n            };\r\n            dbOpenRequest.onblocked = function (event) {\r\n                reject(Error(\"Database opening blocked\"));\r\n            };\r\n        });\r\n    };\r\n    IdxDbSvc.prototype.DeleteDb = function (dbName) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var dbDeleteRequest = _this.IdxDbEnv.deleteDatabase(dbName);\r\n            dbDeleteRequest.onerror = function (event) {\r\n                reject(Error(event.type));\r\n            };\r\n            dbDeleteRequest.onblocked = function (event) {\r\n                reject(Error(event.type));\r\n                event.target.result.close();\r\n                console.log(\"blocked\");\r\n            };\r\n            dbDeleteRequest.onupgradeneeded = function (event) {\r\n                reject(Error(event.type));\r\n            };\r\n            dbDeleteRequest.onsuccess = function (event) {\r\n                resolve(true);\r\n            };\r\n        });\r\n    };\r\n    ;\r\n    return IdxDbSvc;\r\n}());\r\nexports.IdxDbSvc = IdxDbSvc;\r\n//# sourceMappingURL=IdxDbSvc.js.map",
    "\"use strict\";\r\n/// <reference path=\"../../jasmine/jasmine.d.ts\" />\r\n/// <reference path=\"../idxdbsvc.ts\" />\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar DbTableDef_1 = require(\"../DbTableDef\");\r\nvar IdxDbSvc_1 = require(\"../IdxDbSvc\");\r\ndescribe(\"IdxDbSvc\", function () {\r\n    var svc;\r\n    var originalTimeout;\r\n    beforeEach(function (done) {\r\n        //    console.log(\"beforeEach - increasing timeout\");\r\n        //    originalTimeout = jasmine.DEFAULT_TIMEOUT_INTERVAL;\r\n        //    jasmine.DEFAULT_TIMEOUT_INTERVAL = 10000;\r\n        console.log(\"beforeEach - deleting db\");\r\n        svc = new IdxDbSvc_1.IdxDbSvc(window.indexedDB);\r\n        svc.DeleteDb(\"DBName\")\r\n            .then(function (result) {\r\n            expect(result).toBeTruthy();\r\n            done();\r\n        })\r\n            .catch(function (failReason) {\r\n            console.error(failReason);\r\n            expect(false).toBeTruthy();\r\n            done();\r\n        });\r\n    });\r\n    //afterEach(() => {\r\n    //    console.log(\"restoring timeout\");\r\n    //    jasmine.DEFAULT_TIMEOUT_INTERVAL = originalTimeout;\r\n    //});\r\n    describe(\"constructor\", function () {\r\n        it(\"sets up the properties from the args\", function (done) {\r\n            expect(svc.IdxDbEnv).toBeDefined();\r\n            done();\r\n        });\r\n    });\r\n    describe(\"CreateDb\", function () {\r\n        it(\"Creates a database\", function (done) {\r\n            var tblDefs = [];\r\n            tblDefs.push(new DbTableDef_1.DbTableDef(\"tblFoo\", [\"FooCol1\", \"FooCol2\"], \"FooCol1\", true));\r\n            tblDefs.push(new DbTableDef_1.DbTableDef(\"tblBar\", [\"BarCol1\", \"BarCol2\", \"BarCol3\"], \"BarCol1\", false));\r\n            svc.CreateDb(\"DBName\", 1, tblDefs)\r\n                .then(function (result) {\r\n                expect(result).toEqual(true);\r\n                svc.GetStoreNames(\"DBName\", 1)\r\n                    .then(function (objectStoreNames) {\r\n                    expect(objectStoreNames).toBeDefined();\r\n                    expect(objectStoreNames.length).toEqual(2);\r\n                    expect(objectStoreNames[0]).toEqual(\"tblBar\");\r\n                    expect(objectStoreNames[1]).toEqual(\"tblFoo\");\r\n                    done();\r\n                });\r\n            })\r\n                .catch(function (err) {\r\n                console.error(err);\r\n            });\r\n        });\r\n    });\r\n    describe(\"DeleteDb\", function () {\r\n        it(\"Deletes a database\", function (done) {\r\n            console.log(\"DeleteDb - creating db to be deleted\");\r\n            svc.CreateDb(\"DBName\", 1, [new DbTableDef_1.DbTableDef(\"tblFoo\", [\"FooCol1\", \"FooCol2\"], \"FooCol1\", true)])\r\n                .then(function (createResult) {\r\n                console.log(\"DeleteDb - It deletes a database - creating db - result %s\", createResult);\r\n                if (createResult) {\r\n                    svc.DeleteDb(\"DBName\").then(function (deleteResult) {\r\n                        console.log(\"DeleteDb - It deletes a database - deleting db - result %s\", deleteResult);\r\n                        expect(deleteResult).toEqual(true);\r\n                        done();\r\n                    });\r\n                }\r\n                else {\r\n                    console.error(\"CreateDb result was %s\", createResult);\r\n                }\r\n            }).catch(function (failReason) {\r\n                console.error(\"DeleteDb - It deletes a database - creating db failed: %s\", failReason);\r\n                done();\r\n            });\r\n        });\r\n    });\r\n});\r\n//# sourceMappingURL=IdxDbSvc_spec.js.map"
  ]
}